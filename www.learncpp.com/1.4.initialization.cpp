//
// Created by 张弛 on 2023/7/20.
//
#include <iostream>

int main() {
    // 变量赋值
    // 复制赋值之所以如此命名，是因为它将= 运算符右侧的值复制到运算符左侧的变量。= 运算符称为赋值运算符。
    int width;
    width = 5;
    width = 7;
    std::cout << width << std::endl;
    // 初始化
    // 赋值的一个缺点是它至少需要两条语句：一条用于定义变量，一条用于赋值。
    //这两个步骤可以结合起来。定义变量时，还可以同时为变量提供初始值。这称为初始化。用于初始化变量的值称为初始值设定项。
    //C++ 中的初始化非常复杂，因此我们将在这里提供一个简化的视图。
    //C++ 中有 6 种初始化变量的基本方法：
    int a;
    int b = 5;
    int c(6); // 直接初始化 已不建议使用
    // 直接初始化不受欢迎的原因之一是它使得很难区分变量和函数
    //int x();
    //int x(0);

    // C++11列表初始化方法首选  需要编辑配置支持 -std=c++20
    //在 C++ 中初始化对象的现代方法是使用一种利用大括号的初始化形式：列表初始化（也称为统一初始化或大括号初始化）。
    //列表初始化有三种形式：
    int d { 7 };
    int e = {8};
    int f {};

    std::cout << d << e << std::endl;

    // 值初始化和零初始化
    // 当使用空大括号对变量进行列表初始化时，会进行值初始化。在大多数情况下，值初始化会将变量初始化为零（或空，如果这更适合给定类型）。在发生归零的情况下，这称为归零初始化。
    int g1 = {}; // 值初始化 在大多数情况下，这将执行零初始化
    int g2 = {0}; // 如果您实际使用该值，请使用该显式初始化值。
    int g3; // 默认初始化 在大多数情况下，变量的值是不确定的
    std::cout << g1 << g2 << g3 << std::endl;

    // 未使用的初始化变量和 C++17 [[maybe_unused]] 属性
    [[maybe_unused]] int h = {};
    return 0;
}